<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sect2 PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">

<sect2 lang="en" id="git-worktree(1)">
    <title>git-worktree(1)</title>
<indexterm>
<primary>git-worktree(1)</primary>
</indexterm>
<simplesect id="git-worktree(1)__name">
<title>NAME</title>
<simpara>git-worktree - Manage multiple working trees</simpara>
</simplesect>
<simplesect id="git-worktree(1)__synopsis">
<title>SYNOPSIS</title>
<blockquote>
<literallayout><emphasis>git worktree add</emphasis> [-f] [--detach] [--checkout] [--lock] [-b &lt;new-branch&gt;] &lt;path&gt; [&lt;commit-ish&gt;]
<emphasis>git worktree list</emphasis> [--porcelain]
<emphasis>git worktree lock</emphasis> [--reason &lt;string&gt;] &lt;worktree&gt;
<emphasis>git worktree move</emphasis> &lt;worktree&gt; &lt;new-path&gt;
<emphasis>git worktree prune</emphasis> [-n] [-v] [--expire &lt;expire&gt;]
<emphasis>git worktree remove</emphasis> [-f] &lt;worktree&gt;
<emphasis>git worktree unlock</emphasis> &lt;worktree&gt;</literallayout>
</blockquote>
</simplesect>
<simplesect id="git-worktree(1)__description">
<title>DESCRIPTION</title>
<simpara>Manage multiple working trees attached to the same repository.</simpara>
<simpara>A git repository can support multiple working trees, allowing you to check
out more than one branch at a time.  With <emphasis>git worktree add</emphasis> a new working
tree is associated with the repository.  This new working tree is called a
"linked working tree" as opposed to the "main working tree" prepared by "git
init" or "git clone".  A repository has one main working tree (if it's not a
bare repository) and zero or more linked working trees. When you are done
with a linked working tree, remove it with <emphasis>git worktree remove</emphasis>.</simpara>
<simpara>If a working tree is deleted without using <emphasis>git worktree remove</emphasis>, then
its associated administrative files, which reside in the repository
(see "DETAILS" below), will eventually be removed automatically (see
<emphasis>gc.worktreePruneExpire</emphasis> in <xref linkend="git-config(1)" />), or you can run
<emphasis>git worktree prune</emphasis> in the main or any linked working tree to
clean up any stale administrative files.</simpara>
<simpara>If a linked working tree is stored on a portable device or network share
which is not always mounted, you can prevent its administrative files from
being pruned by issuing the <emphasis>git worktree lock</emphasis> command, optionally
specifying <emphasis>--reason</emphasis> to explain why the working tree is locked.</simpara>
</simplesect>
<simplesect id="git-worktree(1)__commands">
<title>COMMANDS</title>
<variablelist>
<varlistentry>
<term>
add &lt;path&gt; [&lt;commit-ish&gt;]
</term>
<listitem>
<simpara>
Create <emphasis>&lt;path&gt;</emphasis> and checkout <emphasis>&lt;commit-ish&gt;</emphasis> into it. The new working directory
is linked to the current repository, sharing everything except working
directory specific files such as HEAD, index, etc. <emphasis>-</emphasis> may also be
specified as <emphasis>&lt;commit-ish&gt;</emphasis>; it is synonymous with <emphasis>@{-1}</emphasis>.
</simpara>
<simpara>If &lt;commit-ish&gt; is a branch name (call it <emphasis>&lt;branch&gt;</emphasis>) and is not found,
and neither <emphasis>-b</emphasis> nor <emphasis>-B</emphasis> nor <emphasis>--detach</emphasis> are used, but there does
exist a tracking branch in exactly one remote (call it <emphasis>&lt;remote&gt;</emphasis>)
with a matching name, treat as equivalent to:</simpara>
<screen>$ git worktree add --track -b &lt;branch&gt; &lt;path&gt; &lt;remote&gt;/&lt;branch&gt;</screen>
<simpara>If the branch exists in multiple remotes and one of them is named by
the <emphasis>checkout.defaultRemote</emphasis> configuration variable, we'll use that
one for the purposes of disambiguation, even if the <emphasis>&lt;branch&gt;</emphasis> isn't
unique across all remotes. Set it to
e.g. <emphasis>checkout.defaultRemote=origin</emphasis> to always checkout remote
branches from there if <emphasis>&lt;branch&gt;</emphasis> is ambiguous but exists on the
<emphasis>origin</emphasis> remote. See also <emphasis>checkout.defaultRemote</emphasis> in
<xref linkend="git-config(1)" />.</simpara>
<simpara>If <emphasis>&lt;commit-ish&gt;</emphasis> is omitted and neither <emphasis>-b</emphasis> nor <emphasis>-B</emphasis> nor <emphasis>--detach</emphasis> used,
then, as a convenience, the new worktree is associated with a branch
(call it <emphasis>&lt;branch&gt;</emphasis>) named after <emphasis>$(basename &lt;path&gt;)</emphasis>.  If <emphasis>&lt;branch&gt;</emphasis>
doesn't exist, a new branch based on HEAD is automatically created as
if <emphasis>-b &lt;branch&gt;</emphasis> was given.  If <emphasis>&lt;branch&gt;</emphasis> does exist, it will be
checked out in the new worktree, if it's not checked out anywhere
else, otherwise the command will refuse to create the worktree (unless
<emphasis>--force</emphasis> is used).</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
list
</term>
<listitem>
<simpara>
List details of each worktree.  The main worktree is listed first, followed by
each of the linked worktrees.  The output details include if the worktree is
bare, the revision currently checked out, and the branch currently checked out
(or <emphasis>detached HEAD</emphasis> if none).
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
lock
</term>
<listitem>
<simpara>
If a working tree is on a portable device or network share which
is not always mounted, lock it to prevent its administrative
files from being pruned automatically. This also prevents it from
being moved or deleted. Optionally, specify a reason for the lock
with <emphasis>--reason</emphasis>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
move
</term>
<listitem>
<simpara>
Move a working tree to a new location. Note that the main working tree
or linked working trees containing submodules cannot be moved.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
prune
</term>
<listitem>
<simpara>
Prune working tree information in $GIT_DIR/worktrees.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
remove
</term>
<listitem>
<simpara>
Remove a working tree. Only clean working trees (no untracked files
and no modification in tracked files) can be removed. Unclean working
trees or ones with submodules can be removed with <emphasis>--force</emphasis>. The main
working tree cannot be removed.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
unlock
</term>
<listitem>
<simpara>
Unlock a working tree, allowing it to be pruned, moved or deleted.
</simpara>
</listitem>
</varlistentry>
</variablelist>
</simplesect>
<simplesect id="git-worktree(1)__options">
<title>OPTIONS</title>
<variablelist>
<varlistentry>
<term>
-f
</term>
<term>
--force
</term>
<listitem>
<simpara>
        By default, <emphasis>add</emphasis> refuses to create a new working tree when
        <emphasis>&lt;commit-ish&gt;</emphasis> is a branch name and is already checked out by
        another working tree, or if <emphasis>&lt;path&gt;</emphasis> is already assigned to some
        working tree but is missing (for instance, if <emphasis>&lt;path&gt;</emphasis> was deleted
        manually). This option overrides these safeguards. To add a missing but
        locked working tree path, specify <emphasis>--force</emphasis> twice.
</simpara>
<simpara><emphasis>move</emphasis> refuses to move a locked working tree unless <emphasis>--force</emphasis> is specified
twice.</simpara>
<simpara><emphasis>remove</emphasis> refuses to remove an unclean working tree unless <emphasis>--force</emphasis> is used.
To remove a locked working tree, specify <emphasis>--force</emphasis> twice.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
-b &lt;new-branch&gt;
</term>
<term>
-B &lt;new-branch&gt;
</term>
<listitem>
<simpara>
        With <emphasis>add</emphasis>, create a new branch named <emphasis>&lt;new-branch&gt;</emphasis> starting at
        <emphasis>&lt;commit-ish&gt;</emphasis>, and check out <emphasis>&lt;new-branch&gt;</emphasis> into the new working tree.
        If <emphasis>&lt;commit-ish&gt;</emphasis> is omitted, it defaults to HEAD.
        By default, <emphasis>-b</emphasis> refuses to create a new branch if it already
        exists. <emphasis>-B</emphasis> overrides this safeguard, resetting <emphasis>&lt;new-branch&gt;</emphasis> to
        <emphasis>&lt;commit-ish&gt;</emphasis>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--detach
</term>
<listitem>
<simpara>
        With <emphasis>add</emphasis>, detach HEAD in the new working tree. See "DETACHED HEAD"
        in <xref linkend="git-checkout(1)" />.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--[no-]checkout
</term>
<listitem>
<simpara>
        By default, <emphasis>add</emphasis> checks out <emphasis>&lt;commit-ish&gt;</emphasis>, however, <emphasis>--no-checkout</emphasis> can
        be used to suppress checkout in order to make customizations,
        such as configuring sparse-checkout. See "Sparse checkout"
        in <xref linkend="git-read-tree(1)" />.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--[no-]guess-remote
</term>
<listitem>
<simpara>
        With <emphasis>worktree add &lt;path&gt;</emphasis>, without <emphasis>&lt;commit-ish&gt;</emphasis>, instead
        of creating a new branch from HEAD, if there exists a tracking
        branch in exactly one remote matching the basename of <emphasis>&lt;path&gt;</emphasis>,
        base the new branch on the remote-tracking branch, and mark
        the remote-tracking branch as "upstream" from the new branch.
</simpara>
<simpara>This can also be set up as the default behaviour by using the
<emphasis>worktree.guessRemote</emphasis> config option.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--[no-]track
</term>
<listitem>
<simpara>
        When creating a new branch, if <emphasis>&lt;commit-ish&gt;</emphasis> is a branch,
        mark it as "upstream" from the new branch.  This is the
        default if <emphasis>&lt;commit-ish&gt;</emphasis> is a remote-tracking branch.  See
        "--track" in <xref linkend="git-branch(1)" /> for details.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--lock
</term>
<listitem>
<simpara>
        Keep the working tree locked after creation. This is the
        equivalent of <emphasis>git worktree lock</emphasis> after <emphasis>git worktree add</emphasis>,
        but without race condition.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
-n
</term>
<term>
--dry-run
</term>
<listitem>
<simpara>
        With <emphasis>prune</emphasis>, do not remove anything; just report what it would
        remove.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--porcelain
</term>
<listitem>
<simpara>
        With <emphasis>list</emphasis>, output in an easy-to-parse format for scripts.
        This format will remain stable across Git versions and regardless of user
        configuration.  See below for details.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
-q
</term>
<term>
--quiet
</term>
<listitem>
<simpara>
        With <emphasis>add</emphasis>, suppress feedback messages.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
-v
</term>
<term>
--verbose
</term>
<listitem>
<simpara>
        With <emphasis>prune</emphasis>, report all removals.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--expire &lt;time&gt;
</term>
<listitem>
<simpara>
        With <emphasis>prune</emphasis>, only expire unused working trees older than &lt;time&gt;.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--reason &lt;string&gt;
</term>
<listitem>
<simpara>
        With <emphasis>lock</emphasis>, an explanation why the working tree is locked.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
&lt;worktree&gt;
</term>
<listitem>
<simpara>
        Working trees can be identified by path, either relative or
        absolute.
</simpara>
<simpara>If the last path components in the working tree's path is unique among
working trees, it can be used to identify worktrees. For example if
you only have two working trees, at "/abc/def/ghi" and "/abc/def/ggg",
then "ghi" or "def/ghi" is enough to point to the former working tree.</simpara>
</listitem>
</varlistentry>
</variablelist>
</simplesect>
<simplesect id="git-worktree(1)__refs">
<title>REFS</title>
<simpara>In multiple working trees, some refs may be shared between all working
trees, some refs are local. One example is HEAD is different for all
working trees. This section is about the sharing rules and how to access
refs of one working tree from another.</simpara>
<simpara>In general, all pseudo refs are per working tree and all refs starting
with "refs/" are shared. Pseudo refs are ones like HEAD which are
directly under GIT_DIR instead of inside GIT_DIR/refs. There is one
exception to this: refs inside refs/bisect and refs/worktree is not
shared.</simpara>
<simpara>Refs that are per working tree can still be accessed from another
working tree via two special paths, main-worktree and worktrees. The
former gives access to per-worktree refs of the main working tree,
while the latter to all linked working trees.</simpara>
<simpara>For example, main-worktree/HEAD or main-worktree/refs/bisect/good
resolve to the same value as the main working tree's HEAD and
refs/bisect/good respectively. Similarly, worktrees/foo/HEAD or
worktrees/bar/refs/bisect/bad are the same as
GIT_COMMON_DIR/worktrees/foo/HEAD and
GIT_COMMON_DIR/worktrees/bar/refs/bisect/bad.</simpara>
<simpara>To access refs, it's best not to look inside GIT_DIR directly. Instead
use commands such as <xref linkend="git-rev-parse(1)" /> or <xref linkend="git-update-ref(1)" />
which will handle refs correctly.</simpara>
</simplesect>
<simplesect id="git-worktree(1)__configuration_file">
<title>CONFIGURATION FILE</title>
<simpara>By default, the repository "config" file is shared across all working
trees. If the config variables <emphasis>core.bare</emphasis> or <emphasis>core.worktree</emphasis> are
already present in the config file, they will be applied to the main
working trees only.</simpara>
<simpara>In order to have configuration specific to working trees, you can turn
on "worktreeConfig" extension, e.g.:</simpara>
<screen>$ git config extensions.worktreeConfig true</screen>
<simpara>In this mode, specific configuration stays in the path pointed by <emphasis>git
rev-parse --git-path config.worktree</emphasis>. You can add or update
configuration in this file with <emphasis>git config --worktree</emphasis>. Older Git
versions will refuse to access repositories with this extension.</simpara>
<simpara>Note that in this file, the exception for <emphasis>core.bare</emphasis> and <emphasis>core.worktree</emphasis>
is gone. If you have them in $GIT_DIR/config before, you must move
them to the <emphasis>config.worktree</emphasis> of the main working tree. You may also
take this opportunity to review and move other configuration that you
do not want to share to all working trees:</simpara>
<itemizedlist>
<listitem>
<simpara>
<emphasis>core.worktree</emphasis> and <emphasis>core.bare</emphasis> should never be shared
</simpara>
</listitem>
<listitem>
<simpara>
<emphasis>core.sparseCheckout</emphasis> is recommended per working tree, unless you
   are sure you always use sparse checkout for all working trees.
</simpara>
</listitem>
</itemizedlist>
</simplesect>
<simplesect id="git-worktree(1)__details">
<title>DETAILS</title>
<simpara>Each linked working tree has a private sub-directory in the repository's
$GIT_DIR/worktrees directory.  The private sub-directory's name is usually
the base name of the linked working tree's path, possibly appended with a
number to make it unique.  For example, when <emphasis>$GIT_DIR=/path/main/.git</emphasis> the
command <emphasis>git worktree add /path/other/test-next next</emphasis> creates the linked
working tree in <emphasis>/path/other/test-next</emphasis> and also creates a
<emphasis>$GIT_DIR/worktrees/test-next</emphasis> directory (or <emphasis>$GIT_DIR/worktrees/test-next1</emphasis>
if <emphasis>test-next</emphasis> is already taken).</simpara>
<simpara>Within a linked working tree, $GIT_DIR is set to point to this private
directory (e.g. <emphasis>/path/main/.git/worktrees/test-next</emphasis> in the example) and
$GIT_COMMON_DIR is set to point back to the main working tree's $GIT_DIR
(e.g. <emphasis>/path/main/.git</emphasis>). These settings are made in a <emphasis>.git</emphasis> file located at
the top directory of the linked working tree.</simpara>
<simpara>Path resolution via <emphasis>git rev-parse --git-path</emphasis> uses either
$GIT_DIR or $GIT_COMMON_DIR depending on the path. For example, in the
linked working tree <emphasis>git rev-parse --git-path HEAD</emphasis> returns
<emphasis>/path/main/.git/worktrees/test-next/HEAD</emphasis> (not
<emphasis>/path/other/test-next/.git/HEAD</emphasis> or <emphasis>/path/main/.git/HEAD</emphasis>) while <emphasis>git
rev-parse --git-path refs/heads/master</emphasis> uses
$GIT_COMMON_DIR and returns <emphasis>/path/main/.git/refs/heads/master</emphasis>,
since refs are shared across all working trees, except refs/bisect and
refs/worktree.</simpara>
<simpara>See <xref linkend="gitrepository-layout(5)" /> for more information. The rule of
thumb is do not make any assumption about whether a path belongs to
$GIT_DIR or $GIT_COMMON_DIR when you need to directly access something
inside $GIT_DIR. Use <emphasis>git rev-parse --git-path</emphasis> to get the final path.</simpara>
<simpara>If you manually move a linked working tree, you need to update the <emphasis>gitdir</emphasis> file
in the entry's directory. For example, if a linked working tree is moved
to <emphasis>/newpath/test-next</emphasis> and its <emphasis>.git</emphasis> file points to
<emphasis>/path/main/.git/worktrees/test-next</emphasis>, then update
<emphasis>/path/main/.git/worktrees/test-next/gitdir</emphasis> to reference <emphasis>/newpath/test-next</emphasis>
instead.</simpara>
<simpara>To prevent a $GIT_DIR/worktrees entry from being pruned (which
can be useful in some situations, such as when the
entry's working tree is stored on a portable device), use the
<emphasis>git worktree lock</emphasis> command, which adds a file named
<emphasis>locked</emphasis> to the entry's directory. The file contains the reason in
plain text. For example, if a linked working tree's <emphasis>.git</emphasis> file points
to <emphasis>/path/main/.git/worktrees/test-next</emphasis> then a file named
<emphasis>/path/main/.git/worktrees/test-next/locked</emphasis> will prevent the
<emphasis>test-next</emphasis> entry from being pruned.  See
<xref linkend="gitrepository-layout(5)" /> for details.</simpara>
<simpara>When extensions.worktreeConfig is enabled, the config file
<emphasis>.git/worktrees/&lt;id&gt;/config.worktree</emphasis> is read after <emphasis>.git/config</emphasis> is.</simpara>
</simplesect>
<simplesect id="git-worktree(1)__list_output_format">
<title>LIST OUTPUT FORMAT</title>
<simpara>The worktree list command has two output formats.  The default format shows the
details on a single line with columns.  For example:</simpara>
<screen>$ git worktree list
/path/to/bare-source            (bare)
/path/to/linked-worktree        abcd1234 [master]
/path/to/other-linked-worktree  1234abc  (detached HEAD)</screen>
<section id="git-worktree(1)__porcelain_format">
<title>Porcelain Format</title>
<simpara>The porcelain format has a line per attribute.  Attributes are listed with a
label and value separated by a single space.  Boolean attributes (like <emphasis>bare</emphasis>
and <emphasis>detached</emphasis>) are listed as a label only, and are only present if and only
if the value is true.  The first attribute of a worktree is always <emphasis>worktree</emphasis>,
an empty line indicates the end of the record.  For example:</simpara>
<screen>$ git worktree list --porcelain
worktree /path/to/bare-source
bare

worktree /path/to/linked-worktree
HEAD abcd1234abcd1234abcd1234abcd1234abcd1234
branch refs/heads/master

worktree /path/to/other-linked-worktree
HEAD 1234abc1234abc1234abc1234abc1234abc1234a
detached</screen>
</section>
</simplesect>
<simplesect id="git-worktree(1)__examples">
<title>EXAMPLES</title>
<simpara>You are in the middle of a refactoring session and your boss comes in and
demands that you fix something immediately. You might typically use
<xref linkend="git-stash(1)" /> to store your changes away temporarily, however, your
working tree is in such a state of disarray (with new, moved, and removed
files, and other bits and pieces strewn around) that you don't want to risk
disturbing any of it. Instead, you create a temporary linked working tree to
make the emergency fix, remove it when done, and then resume your earlier
refactoring session.</simpara>
<screen>$ git worktree add -b emergency-fix ../temp master
$ pushd ../temp
# ... hack hack hack ...
$ git commit -a -m 'emergency fix for boss'
$ popd
$ git worktree remove ../temp</screen>
</simplesect>
<simplesect id="git-worktree(1)__bugs">
<title>BUGS</title>
<simpara>Multiple checkout in general is still experimental, and the support
for submodules is incomplete. It is NOT recommended to make multiple
checkouts of a superproject.</simpara>
</simplesect>
<simplesect id="git-worktree(1)__git">
<title>GIT</title>
<simpara>Part of the <xref linkend="git(1)" /> suite</simpara>
</simplesect>
</sect2>

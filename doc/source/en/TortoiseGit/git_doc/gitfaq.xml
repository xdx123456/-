<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sect2 PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">

<sect2 lang="en" id="gitfaq(7)">
    <title>gitfaq(7)</title>
<indexterm>
<primary>gitfaq(7)</primary>
</indexterm>
<simplesect id="gitfaq(7)__name">
<title>NAME</title>
<simpara>gitfaq - Frequently asked questions about using Git</simpara>
</simplesect>
<simplesect id="gitfaq(7)__synopsis">
<title>SYNOPSIS</title>
<simpara>gitfaq</simpara>
</simplesect>
<simplesect id="gitfaq(7)__description">
<title>DESCRIPTION</title>
<simpara>The examples in this FAQ assume a standard POSIX shell, like <emphasis>bash</emphasis> or <emphasis>dash</emphasis>,
and a user, A U Thor, who has the account <emphasis>author</emphasis> on the hosting provider
<emphasis>git.example.org</emphasis>.</simpara>
</simplesect>
<simplesect id="gitfaq(7)__configuration">
<title>Configuration</title>
<variablelist id="user-name">
<varlistentry>
<term>
What should I put in <emphasis>user.name</emphasis>?
</term>
<listitem>
<simpara>
        You should put your personal name, generally a form using a given name
        and family name.  For example, the current maintainer of Git uses "Junio
        C Hamano".  This will be the name portion that is stored in every commit
        you make.
</simpara>
<simpara>This configuration doesn't have any effect on authenticating to remote services;
for that, see <emphasis>credential.username</emphasis> in <xref linkend="git-config(1)" />.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
What does <emphasis>http.postBuffer</emphasis> really do?
</term>
<listitem>
<simpara>
        This option changes the size of the buffer that Git uses when pushing
        data to a remote over HTTP or HTTPS.  If the data is larger than this
        size, libcurl, which handles the HTTP support for Git, will use chunked
        transfer encoding since it isn't known ahead of time what the size of
        the pushed data will be.
</simpara>
<simpara id="http-postbuffer">Leaving this value at the default size is fine unless you know that either the
remote server or a proxy in the middle doesn't support HTTP/1.1 (which
introduced the chunked transfer encoding) or is known to be broken with chunked
data.  This is often (erroneously) suggested as a solution for generic push
problems, but since almost every server and proxy supports at least HTTP/1.1,
raising this value usually doesn't solve most push problems.  A server or proxy
that didn't correctly support HTTP/1.1 and chunked transfer encoding wouldn't be
that useful on the Internet today, since it would break lots of traffic.</simpara>
<simpara>Note that increasing this value will increase the memory used on every relevant
push that Git does over HTTP or HTTPS, since the entire buffer is allocated
regardless of whether or not it is all used.  Thus, it's best to leave it at the
default unless you are sure you need a different value.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
How do I configure a different editor?
</term>
<listitem>
<simpara>
        If you haven't specified an editor specifically for Git, it will by default
        use the editor you've configured using the <emphasis>VISUAL</emphasis> or <emphasis>EDITOR</emphasis> environment
        variables, or if neither is specified, the system default (which is usually
        <emphasis>vi</emphasis>).  Since some people find <emphasis>vi</emphasis> difficult to use or prefer a different
        editor, it may be desirable to change the editor used.
</simpara>
<simpara id="configure-editor">If you want to configure a general editor for most programs which need one, you
can edit your shell configuration (e.g., <emphasis>~/.bashrc</emphasis> or <emphasis>~/.zshenv</emphasis>) to contain
a line setting the <emphasis>EDITOR</emphasis> or <emphasis>VISUAL</emphasis> environment variable to an appropriate
value.  For example, if you prefer the editor <emphasis>nano</emphasis>, then you could write the
following:</simpara>
<screen>export VISUAL=nano</screen>
<simpara>If you want to configure an editor specifically for Git, you can either set the
<emphasis>core.editor</emphasis> configuration value or the <emphasis>GIT_EDITOR</emphasis> environment variable.  You
can see <xref linkend="git-var(1)" /> for details on the order in which these options are
consulted.</simpara>
<simpara>Note that in all cases, the editor value will be passed to the shell, so any
arguments containing spaces should be appropriately quoted.  Additionally, if
your editor normally detaches from the terminal when invoked, you should specify
it with an argument that makes it not do that, or else Git will not see any
changes.  An example of a configuration addressing both of these issues on
Windows would be the configuration <emphasis>"C:\Program Files\Vim\gvim.exe" --nofork</emphasis>,
which quotes the filename with spaces and specifies the <emphasis>--nofork</emphasis> option to
avoid backgrounding the process.</simpara>
</listitem>
</varlistentry>
</variablelist>
</simplesect>
<simplesect id="gitfaq(7)__credentials">
<title>Credentials</title>
<variablelist id="http-credentials">
<varlistentry>
<term>
How do I specify my credentials when pushing over HTTP?
</term>
<listitem>
<simpara>
        The easiest way to do this is to use a credential helper via the
        <emphasis>credential.helper</emphasis> configuration.  Most systems provide a standard
        choice to integrate with the system credential manager.  For example,
        Git for Windows provides the <emphasis>wincred</emphasis> credential manager, macOS has the
        <emphasis>osxkeychain</emphasis> credential manager, and Unix systems with a standard
        desktop environment can use the <emphasis>libsecret</emphasis> credential manager.  All of
        these store credentials in an encrypted store to keep your passwords or
        tokens secure.
</simpara>
<simpara>In addition, you can use the <emphasis>store</emphasis> credential manager which stores in a file
in your home directory, or the <emphasis>cache</emphasis> credential manager, which does not
permanently store your credentials, but does prevent you from being prompted for
them for a certain period of time.</simpara>
<simpara>You can also just enter your password when prompted.  While it is possible to
place the password (which must be percent-encoded) in the URL, this is not
particularly secure and can lead to accidental exposure of credentials, so it is
not recommended.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
How do I read a password or token from an environment variable?
</term>
<listitem>
<simpara>
        The <emphasis>credential.helper</emphasis> configuration option can also take an arbitrary
        shell command that produces the credential protocol on standard output.
        This is useful when passing credentials into a container, for example.
</simpara>
<simpara id="http-credentials-environment">Such a shell command can be specified by starting the option value with an
exclamation point.  If your password or token were stored in the <emphasis>GIT_TOKEN</emphasis>,
you could run the following command to set your credential helper:</simpara>
<screen>$ git config credential.helper \
        '!f() { echo username=author; echo "password=$GIT_TOKEN"; };f'</screen>
</listitem>
</varlistentry>
<varlistentry>
<term>
How do I change the password or token I've saved in my credential manager?
</term>
<listitem>
<simpara>
        Usually, if the password or token is invalid, Git will erase it and
        prompt for a new one.  However, there are times when this doesn't always
        happen.  To change the password or token, you can erase the existing
        credentials and then Git will prompt for new ones.  To erase
        credentials, use a syntax like the following (substituting your username
        and the hostname):
</simpara>
<screen id="http-reset-credentials">$ echo url=https://author@git.example.org | git credential reject</screen>
</listitem>
</varlistentry>
<varlistentry>
<term>
How do I use multiple accounts with the same hosting provider using HTTP?
</term>
<listitem>
<simpara>
        Usually the easiest way to distinguish between these accounts is to use
        the username in the URL.  For example, if you have the accounts <emphasis>author</emphasis>
        and <emphasis>committer</emphasis> on <emphasis>git.example.org</emphasis>, you can use the URLs
        <ulink url="https://author@git.example.org/org1/project1.git">https://author@git.example.org/org1/project1.git</ulink> and
        <ulink url="https://committer@git.example.org/org2/project2.git">https://committer@git.example.org/org2/project2.git</ulink>.  This way, when you
        use a credential helper, it will automatically try to look up the
        correct credentials for your account.  If you already have a remote set
        up, you can change the URL with something like <emphasis>git remote set-url
        origin https://author@git.example.org/org1/project1.git</emphasis> (see
        <xref linkend="git-remote(1)" /> for details).
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
How do I use multiple accounts with the same hosting provider using SSH?
</term>
<listitem>
<simpara>
        With most hosting providers that support SSH, a single key pair uniquely
        identifies a user.  Therefore, to use multiple accounts, it's necessary
        to create a key pair for each account.  If you're using a reasonably
        modern OpenSSH version, you can create a new key pair with something
        like <emphasis>ssh-keygen -t ed25519 -f ~/.ssh/id_committer</emphasis>.  You can then
        register the public key (in this case, <emphasis>~/.ssh/id_committer.pub</emphasis>; note
        the <emphasis>.pub</emphasis>) with the hosting provider.
</simpara>
<simpara id="multiple-accounts-ssh">Most hosting providers use a single SSH account for pushing; that is, all users
push to the <emphasis>git</emphasis> account (e.g., <emphasis>git@git.example.org</emphasis>).  If that's the case for
your provider, you can set up multiple aliases in SSH to make it clear which key
pair to use.  For example, you could write something like the following in
<emphasis>~/.ssh/config</emphasis>, substituting the proper private key file:</simpara>
<screen># This is the account for author on git.example.org.
Host example_author
        HostName git.example.org
        User git
        # This is the key pair registered for author with git.example.org.
        IdentityFile ~/.ssh/id_author
        IdentitiesOnly yes
# This is the account for committer on git.example.org.
Host example_committer
        HostName git.example.org
        User git
        # This is the key pair registered for committer with git.example.org.
        IdentityFile ~/.ssh/id_committer
        IdentitiesOnly yes</screen>
<simpara>Then, you can adjust your push URL to use <emphasis>git@example_author</emphasis> or
<emphasis>git@example_committer</emphasis> instead of <emphasis>git@example.org</emphasis> (e.g., <emphasis>git remote set-url
git@example_author:org1/project1.git</emphasis>).</simpara>
</listitem>
</varlistentry>
</variablelist>
</simplesect>
<simplesect id="gitfaq(7)__common_issues">
<title>Common Issues</title>
<variablelist id="last-commit-amend">
<varlistentry>
<term>
I've made a mistake in the last commit.  How do I change it?
</term>
<listitem>
<simpara>
        You can make the appropriate change to your working tree, run <emphasis>git add
        &lt;file&gt;</emphasis> or <emphasis>git rm &lt;file&gt;</emphasis>, as appropriate, to stage it, and then <emphasis>git
        commit --amend</emphasis>.  Your change will be included in the commit, and you'll
        be prompted to edit the commit message again; if you wish to use the
        original message verbatim, you can use the <emphasis>--no-edit</emphasis> option to <emphasis>git
        commit</emphasis> in addition, or just save and quit when your editor opens.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
I've made a change with a bug and it's been included in the main branch.  How should I undo it?
</term>
<listitem>
<simpara>
        The usual way to deal with this is to use <emphasis>git revert</emphasis>.  This preserves
        the history that the original change was made and was a valuable
        contribution, but also introduces a new commit that undoes those changes
        because the original had a problem.  The commit message of the revert
        indicates the commit which was reverted and is usually edited to include
        an explanation as to why the revert was made.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
How do I ignore changes to a tracked file?
</term>
<listitem>
<simpara>
        Git doesn't provide a way to do this.  The reason is that if Git needs
        to overwrite this file, such as during a checkout, it doesn't know
        whether the changes to the file are precious and should be kept, or
        whether they are irrelevant and can safely be destroyed.  Therefore, it
        has to take the safe route and always preserve them.
</simpara>
<simpara id="ignore-tracked-files">It's tempting to try to use certain features of <emphasis>git update-index</emphasis>, namely the
assume-unchanged and skip-worktree bits, but these don't work properly for this
purpose and shouldn't be used this way.</simpara>
<simpara>If your goal is to modify a configuration file, it can often be helpful to have
a file checked into the repository which is a template or set of defaults which
can then be copied alongside and modified as appropriate.  This second, modified
file is usually ignored to prevent accidentally committing it.</simpara>
</listitem>
</varlistentry>
</variablelist>
</simplesect>
<simplesect id="gitfaq(7)__hooks">
<title>Hooks</title>
<variablelist id="restrict-with-hooks">
<varlistentry>
<term>
How do I use hooks to prevent users from making certain changes?
</term>
<listitem>
<simpara>
        The only safe place to make these changes is on the remote repository
        (i.e., the Git server), usually in the <emphasis>pre-receive</emphasis> hook or in a
        continuous integration (CI) system.  These are the locations in which
        policy can be enforced effectively.
</simpara>
<simpara>It's common to try to use <emphasis>pre-commit</emphasis> hooks (or, for commit messages,
<emphasis>commit-msg</emphasis> hooks) to check these things, which is great if you're working as a
solo developer and want the tooling to help you.  However, using hooks on a
developer machine is not effective as a policy control because a user can bypass
these hooks with <emphasis>--no-verify</emphasis> without being noticed (among various other ways).
Git assumes that the user is in control of their local repositories and doesn't
try to prevent this or tattle on the user.</simpara>
<simpara>In addition, some advanced users find <emphasis>pre-commit</emphasis> hooks to be an impediment to
workflows that use temporary commits to stage work in progress or that create
fixup commits, so it's better to push these kinds of checks to the server
anyway.</simpara>
</listitem>
</varlistentry>
</variablelist>
</simplesect>
<simplesect id="gitfaq(7)__cross_platform_issues">
<title>Cross-Platform Issues</title>
<variablelist id="windows-text-binary">
<varlistentry>
<term>
I'm on Windows and my text files are detected as binary.
</term>
<listitem>
<simpara>
        Git works best when you store text files as UTF-8.  Many programs on
        Windows support UTF-8, but some do not and only use the little-endian
        UTF-16 format, which Git detects as binary.  If you can't use UTF-8 with
        your programs, you can specify a working tree encoding that indicates
        which encoding your files should be checked out with, while still
        storing these files as UTF-8 in the repository.  This allows tools like
        <xref linkend="git-diff(1)" /> to work as expected, while still allowing your tools
        to work.
</simpara>
<simpara>To do so, you can specify a <xref linkend="gitattributes(5)" /> pattern with the
<emphasis>working-tree-encoding</emphasis> attribute.  For example, the following pattern sets all
C files to use UTF-16LE-BOM, which is a common encoding on Windows:</simpara>
<screen>*.c     working-tree-encoding=UTF-16LE-BOM</screen>
<simpara>You will need to run <emphasis>git add --renormalize</emphasis> to have this take effect.  Note
that if you are making these changes on a project that is used across platforms,
you'll probably want to make it in a per-user configuration file or in the one
in <emphasis>$GIT_DIR/info/attributes</emphasis>, since making it in a <emphasis>.gitattributes</emphasis> file in the
repository will apply to all users of the repository.</simpara>
<simpara>See the following entry for information about normalizing line endings as well,
and see <xref linkend="gitattributes(5)" /> for more information about attribute files.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
I'm on Windows and git diff shows my files as having a <emphasis>^M</emphasis> at the end.
</term>
<listitem>
<simpara>
        By default, Git expects files to be stored with Unix line endings.  As such,
        the carriage return (<emphasis>^M</emphasis>) that is part of a Windows line ending is shown
        because it is considered to be trailing whitespace.  Git defaults to showing
        trailing whitespace only on new lines, not existing ones.
</simpara>
<simpara id="windows-diff-control-m">You can store the files in the repository with Unix line endings and convert
them automatically to your platform's line endings.  To do that, set the
configuration option <emphasis>core.eol</emphasis> to <emphasis>native</emphasis> and see the following entry for
information about how to configure files as text or binary.</simpara>
<simpara>You can also control this behavior with the <emphasis>core.whitespace</emphasis> setting if you
don't wish to remove the carriage returns from your line endings.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
What's the recommended way to store files in Git?
</term>
<listitem>
<simpara>
        While Git can store and handle any file of any type, there are some
        settings that work better than others.  In general, we recommend that
        text files be stored in UTF-8 without a byte-order mark (BOM) with LF
        (Unix-style) endings.  We also recommend the use of UTF-8 (again,
        without BOM) in commit messages.  These are the settings that work best
        across platforms and with tools such as <emphasis>git diff</emphasis> and <emphasis>git merge</emphasis>.
</simpara>
<simpara id="recommended-storage-settings">Additionally, if you have a choice between storage formats that are text based
or non-text based, we recommend storing files in the text format and, if
necessary, transforming them into the other format.  For example, a text-based
SQL dump with one record per line will work much better for diffing and merging
than an actual database file.  Similarly, text-based formats such as Markdown
and AsciiDoc will work better than binary formats such as Microsoft Word and
PDF.</simpara>
<simpara>Similarly, storing binary dependencies (e.g., shared libraries or JAR files) or
build products in the repository is generally not recommended.  Dependencies and
build products are best stored on an artifact or package server with only
references, URLs, and hashes stored in the repository.</simpara>
<simpara>We also recommend setting a <xref linkend="gitattributes(5)" /> file to explicitly mark
which files are text and which are binary.  If you want Git to guess, you can
set the attribute <emphasis>text=auto</emphasis>.  For example, the following might be appropriate
in some projects:</simpara>
<screen># By default, guess.
*       text=auto
# Mark all C files as text.
*.c     text
# Mark all JPEG files as binary.
*.jpg   binary</screen>
<simpara>These settings help tools pick the right format for output such as patches and
result in files being checked out in the appropriate line ending for the
platform.</simpara>
</listitem>
</varlistentry>
</variablelist>
</simplesect>
<simplesect id="gitfaq(7)__git">
<title>GIT</title>
<simpara>Part of the <xref linkend="git(1)" /> suite</simpara>
</simplesect>
</sect2>
